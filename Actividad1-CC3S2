# üìò Actividad 1 ‚Äì Introducci√≥n a DevOps y DevSecOps

**Curso:** CC3S2 Desarrollo de Software  
**Estudiante:** <Tu nombre>  
**Fecha:** 07/09/2025  
**Tiempo invertido:** <hh:mm>

**Entorno usado (breve y sin datos sensibles):**  
Navegador web para inspecci√≥n (DevTools), sitios p√∫blicos para DNS/TLS, diagramado en draw.io/Excalidraw.  
*(Sin credenciales ni tokens).*

---

## üîπ 1. DevOps vs. Cascada Tradicional

**Imagen:** `imagenes/devops-vs-cascada.png`

**S√≠ntesis:**  
DevOps acelera y reduce riesgo en la nube al **acortar ciclos de feedback**, trabajar en **lotes peque√±os**, automatizar pruebas y despliegues, y **alinear Dev-Ops**. Esto reduce tiempos de integraci√≥n, *lead time*, tasa de fallos y mejora MTTR (m√©tricas DORA).  
La **config externa y port binding (12-Factor)** favorecen reproducibilidad entre entornos.  

**Contexto donde ‚Äúcascada‚Äù a√∫n es razonable:**  
- **Sistemas con certificaciones regulatorias estrictas** (p. ej., m√©dicos/aeron√°uticos).  
  - *Criterio 1:* cada release requiere **evidencia de conformidad** (checklist firmado por QA externo).  
  - *Criterio 2:* **cambios agrupados** con aprobaci√≥n de organismo regulador.  
  - *Trade-off:* menor velocidad vs. mayor conformidad/seguridad.

> Referencias: DORA ‚Äì Four Keys, 12-Factor App.

---

## üîπ 2. Ciclo Tradicional y Silos

**Imagen:** `imagenes/silos-equipos.png`

**Limitaciones sin CI:**  
1. **Lotes grandes** ‚Üí m√°s retrabajos y regresiones.  
2. **Colas de defectos** y alto costo de integraci√≥n tard√≠a.

**Anti-patrones:**  
- **‚ÄúThrow over the wall‚Äù** ‚Üí Dev entrega sin contexto ‚Üí aumenta MTTR.  
- **Seguridad tard√≠a** ‚Üí hallazgos al final ‚Üí bloqueos y retrabajos.

---

## üîπ 3. Principios y Beneficios de DevOps

- **CI/CD:** cambios peque√±os, pruebas automatizadas, pipelines reproducibles.  
- **Agile como precursor:** *dailies* y *retros* alimentan decisiones de promoci√≥n o bloqueo.

**Indicador observable (no financiero):**  
- Tiempo **PR listo ‚Üí despliegue en pruebas (p50)**.  
  - *C√≥mo medir:* metadatos de PR + bit√°cora de despliegue.  
  - *Meta:* reducir en un **30%** en 4 iteraciones.

---

## üîπ 4. Evoluci√≥n a DevSecOps

- **SAST:** est√°tico y temprano.  
- **DAST:** din√°mico en ejecuci√≥n.  

**Gate de seguridad (umbrales):**  
- SAST: **0** vulnerabilidades cr√≠ticas/altas (CVSS ‚â• 7.0).  
- DAST: **‚â• 80%** de cobertura en rutas cr√≠ticas.  

**Excepci√≥n:** 7 d√≠as m√°x., responsable asignado, plan de mitigaci√≥n.  

**Evitar ‚Äúteatro de seguridad‚Äù:**  
- ‚Üì hallazgos repetidos ‚â§ 5%.  
- Tiempo de remediaci√≥n ‚â§ 48h.

> Marco: NIST SSDF.

---

## üîπ 5. CI/CD y Estrategias de Despliegue

**Imagen:** `imagenes/pipeline_canary.png`

**Estrategia elegida:** Canary (ejemplo: microservicio de autenticaci√≥n).

**Riesgos vs Mitigaciones:**

| Riesgo               | Mitigaci√≥n                                       |
|----------------------|--------------------------------------------------|
| Regresi√≥n funcional  | Validaci√≥n de contrato + *smoke tests*            |
| Costo de convivencia | Limitar a 60 min + rollback autom√°tico            |
| Manejo de sesiones   | *Draining* + esquemas compatibles + sticky sessions |

**KPIs:**  
- Tasa de **5xx ‚â§ 0.1%** en 1h post-canary.  
- **Conversi√≥n ‚â• 95%** del valor base pre-release.  

*(Ambos deben coexistir para garantizar estabilidad t√©cnica + negocio).*

---

## üîπ 6. Fundamentos Pr√°cticos (sin comandos)

### 6.1 HTTP ‚Äì contrato observable
**Imagen:** `imagenes/http-evidencia.png`  
Ejemplo: GET ‚Üí 200, cabeceras `Cache-Control: max-age=3600` y `X-Request-ID`.  

### 6.2 DNS ‚Äì nombres y TTL
**Imagen:** `imagenes/dns-ttl.png`  
Ejemplo: registro A, TTL=3600s. TTL alto retrasa rollbacks.

### 6.3 TLS ‚Äì seguridad en tr√°nsito
**Imagen:** `imagenes/tls-cert.png`  
Ejemplo: CN/SAN correctos, Let‚Äôs Encrypt, v√°lido hasta 2025.  
Caducado = errores de confianza y riesgo MITM.

### 6.4 Puertos ‚Äì runtime
**Imagen:** `imagenes/puertos.png`  
Ejemplo: 80 (HTTP) y 443 (HTTPS). Ausencia de 443 = despliegue incompleto.

### 6.5 12-Factor
- **Port binding:** config externa.  
- **Logs:** stdout, no rotaci√≥n manual.  
- **Anti-patr√≥n:** credenciales en repo ‚Üí rompe reproducibilidad.

### 6.6 Checklist de diagn√≥stico
1. HTTP (m√©todo/c√≥digo/cabeceras).  
2. DNS (consistencia + TTL).  
3. TLS (vigencia/cadena).  
4. Puertos (80/443 expuestos).  
5. KPIs canary vs control.  
6. Logs correlacionados (X-Request-ID).

---

## üîπ 7. Desaf√≠os y Mitigaciones

**Imagen:** `imagenes/desafios_devops.png`

- Cambios no observables ‚Üí feature flags + rollback probado.  
- Blast radius amplio ‚Üí canary + l√≠mites de tr√°fico.  
- Error humano ‚Üí revisi√≥n cruzada + runbooks automatizados.  

**Experimento:** comparar canary vs big-bang, m√©trica primaria = 5xx/p95. √âxito = canary reduce ‚â• 50% fallos.

---

## üîπ 8. Arquitectura M√≠nima DevSecOps

**Imagen:** `imagenes/arquitectura-minima.png`

**Flujo:** Cliente ‚Üí DNS ‚Üí HTTP ‚Üí TLS.  
**Controles:** cach√©, validaci√≥n cert, contratos API, l√≠mites de tasa.  

**12-Factor aplicados:**  
- Config por entorno (m√≠nimos diffs).  
- Logs a stdout (trazabilidad).

---

## ‚úÖ Evidencias Incluidas

- HTTP: m√©todo, c√≥digo y cabeceras.  
- DNS: registro + TTL.  
- TLS: CN/SAN + vigencia + emisora.  
- Puertos expuestos.  
- Umbrales num√©ricos (gates/KPIs).  
- Checklist operativo.

---

## üîπ Trazabilidad de commits

1. `D√≠a 1 - Comparativos e im√°genes base`  
2. `D√≠a 2 - DevSecOps y estrategia de despliegue`  
3. `D√≠a 3 - Evidencia, diagramas y entrega final`  
4. `Entrega actividad 1`

---

